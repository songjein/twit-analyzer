<!DOCTYPE html>
<html>
  <head>
    <script  src="https://code.jquery.com/jquery-1.12.4.js" integrity="sha256-Qw82+bXyGq6MydymqBxNPYTaUXXq7c8v3CwiYwLLNXU=" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css">
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js"></script>
		<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    
		<style>
			#search {
			} 
			#search_input{
				 position: relative;
			}

			#overlay{
				 position: absolute;
				 top: 0; left: 0;
				 background: rgba(0,0,0,0.5);
				 display: none;
			}

			#overlay input{
				 font-size: 5em;
				 width: 50%;
			}

			input[type="text"]{
					background: transparent;
					border: none;
					color: white;
					outline: none;
			}
			
			::-webkit-input-placeholder { /* WebKit, Blink, Edge */
					color:    white;
			}

			:-moz-placeholder { /* Mozilla Firefox 4 to 18 */
				 color:    white;
				 opacity:  1;
			}

			::-moz-placeholder { /* Mozilla Firefox 19+ */
				 color:    white;
				 opacity:  1;
			}
			:-ms-input-placeholder { /* Internet Explorer 10-11 */ 
				color:    white;
			}
		</style>
      
    <script>
				// global variable
				// global variable
				var map;
				var circles = [];
				var markers = [];
				var traj_line ;
				var mode = ""
				// global variable
				// global variable

				
				function initMap() {
					var styleArray = [
						{
							featureType: 'all',
							stylers: [
								{ saturation: -80 }
							]
						},{
							featureType: 'road.arterial',
							elementType: 'geometry',
							stylers: [
								{ hue: '#00ffee' },
								{ saturation: 50 }
							]
						},{
							featureType: 'poi.business',
							elementType: 'labels',
							stylers: [
								{ visibility: 'off' }
							]
						}
					];

					var mapCanvas = document.getElementById("map");
					var mapOptions = {
					  center:  new google.maps.LatLng(37.09024, -95.712891), 
					  zoom: 4,
					  minZoom: 4,
					  styles: styleArray
					}

				 map = new google.maps.Map(mapCanvas, mapOptions);

				
				}
        $(function(){

					// query make & send 
					// query make & send 
					function asterixQuery(keyword, mode){
						// 빈칸 필수
						// ; 찍었다가 get의 파라미터 상에서 오류가나서.. 근데 post로 보내면 상관 없을 듯!
						if (mode == "search"){
							query = encodeURI(
								"use dataverse twitter " + 
								"for $t in dataset ds_tweets " +
								"where contains($t.text_msg, \"" + keyword + "\" ) " +
								"return $t; ")
							console.log(query)

							// CORS 문제 때문에 proxy서버를 이용해야됨
							// http://adrenal.tistory.com/16
							proxy = "http://polaris.gachon.ac.kr/analyzer/index?query=";

							$.ajax({
								dataType: 'json',
								url: proxy + query,
								beforeSend: function(){
									//https://answers.squarespace.com/questions/139989/loading-gif-for-individual-images.html
									$('#queryStatus').html("<center><img src='https://d13yacurqjgara.cloudfront.net/users/82092/screenshots/1073359/spinner.gif'></center>")	
								},
								success: function(data){
									texts = "" 
									locs = []  // locations
									$.each(data, function(idx, obj){
										//texts.push(obj["text_msg"])
										_lat = (obj["place"]["bounding_box"][0][1] + obj["place"]["bounding_box"][1][1])/2
										_lng= (obj["place"]["bounding_box"][0][0] + obj["place"]["bounding_box"][1][0])/2
										texts += "<h5>" + (obj["text_msg"]) + "</h5>"
										locs.push([parseFloat(_lat), parseFloat(_lng)])
									})
									$('#queryStatus').html("")
									$('#queryResult').html(texts)

									// Construct the circle for each value in citymap.
									// Note: We scale the area of the circle based on the population.
									for (var i in circles){
										circles[i].setMap(null);
									}
	
									for (var i in locs) {
										// Add the circle for this city to the map.
										var cityCircle = new google.maps.Circle({
											strokeColor: 'gray',
											strokeOpacity: 0.8,
											fillColor: 'gray',
											fillOpacity: 0.35,
											map: map,
											center: {lat: locs[i][0] , lng: locs[i][1]},
											radius: 10000
										});
										circles.push(cityCircle)
									}

								}
							})
						}
						// trajectory
						// trajectory
						else if (mode == "trajectory"){
							query = encodeURI(
								"use dataverse twitter " + 
								"for $t in dataset ds_tweets " + 
									"where contains($t.text_msg, '" + keyword + "' ) " +
									"group by $d := print-datetime($t.create_at, 'MM-DD') with $t " +
									"order by $d " + 
								"return { " +
									"'date': $d, "+
									"'city': for $tt in dataset ds_tweets " +
										"where print-datetime($tt.create_at, 'MM-DD') = $d and contains($tt.text_msg, '"+ keyword +"' ) " +
										"group by $s := $tt.place.full_name with $tt " +
										"let $c := count($tt) " +
										"order by $c desc " +
										"limit 1 " +
										"return { " +
										"'place': $tt[0].place, " +
										"'count': count($tt), " +
										"'text_msg': $tt[0].text_msg " +
										"} " +
								"}; " 
								)

							// CORS 문제 때문에 proxy서버를 이용해야됨
							// http://adrenal.tistory.com/16
							proxy = "http://polaris.gachon.ac.kr/analyzer/index?query=";

							$.ajax({
								dataType: 'json',
								url: proxy + query,
								beforeSend: function(){
									//https://answers.squarespace.com/questions/139989/loading-gif-for-individual-images.html
									$('#queryStatus').html("<center><img src='https://d13yacurqjgara.cloudfront.net/users/82092/screenshots/1073359/spinner.gif'></center>")	
								},
								success: function(data){
									console.log(data)
									texts = "" 
									locs = []  // locations
									counts = []

									// count 평균 계산
									mean_count = 0;
									$.each(data, function(idx, obj){
										mean_count += Number(obj["city"][0]["count"])
									})
									//alert('mean : ' + mean_count / data.length)
									mean_count =  mean_count / data.length

									$.each(data, function(idx, obj){
										if (Number(obj["city"][0]["count"]) >= mean_count){
											_lat = (obj["city"][0]["place"]["bounding_box"][0][1] + obj["city"][0]["place"]["bounding_box"][1][1])/2
											_lng= (obj["city"][0]["place"]["bounding_box"][0][0] + obj["city"][0]["place"]["bounding_box"][1][0])/2
											// 굳이...? 
											counts.push({"count": obj["city"][0]["count"], "date": obj["date"] })
											locs.push({lat: parseFloat(_lat), lng: parseFloat(_lng)})
										}
									})
									console.log(counts)
									console.log(locs)

									$('#queryStatus').html("")
									//$('#queryResult').html(texts)


									// node 지우기
									for (var i in circles){
										circles[i].setMap(null);
									}

									var lineSymbol = {
										path: google.maps.SymbolPath.FORWARD_OPEN_ARROW
									};
									
									// line 지우기 
									if (traj_line){
										traj_line.setMap(null);
									}
									
									// locs를 직선 하나씩으로 쪼개서
									lines = []
									for (i = 1; i < locs.length; i++){
										tmp = []
										tmp.push(locs[i-1])
										tmp.push(locs[i])
										lines.push(tmp);
									}

									//console.log(lines)

									// draw & animate
									//rainbow = ["red", "orange", "yellow", "green", "blue", "navy", "purple"]
									rainbow = ["black", "gray"]
									
									// draw points
									for (var i in locs) {
									}
									
									// draw lines
									traj_lines = []
									_i = 0;
									function drawOneLine(){
										// draw index
										// draw index
										var image = {
											url: 'https://raw.githubusercontent.com/Concept211/Google-Maps-Markers/master/images/marker_white'+ (Number(_i) + 1) + '.png',
											size: new google.maps.Size(22,32),
											origin: new google.maps.Point(0,0),
											anchor: new google.maps.Point(10,32)
										}
										var marker = new google.maps.Marker({
												position: {lat: locs[_i]['lat'] , lng: locs[_i]['lng']},
												map: map,
												icon: image,
										})

										// draw circle
										// draw circle
										var cityCircle = new google.maps.Circle({
											//strokeColor: rainbow[_i % 7], 
											strokeColor: rainbow[_i % 2], 
											strokeOpacity: 0.5,
											fillColor: 'transparent', 
											fillOpacity: 0.5,
											map: map,
											center: {lat: locs[_i]['lat'] , lng: locs[_i]['lng']},
											radius: 10000 * counts[_i]['count']/2 // 이 수치는 재정의 할 필요가 있음
										})
										circles.push(cityCircle)

										// draw line
										// draw line
										if (_i > 0){
											traj_lines[_i] = new google.maps.Polyline({
												path: lines[_i - 1]	,
												icons: [{
													icon: (_i == lines.length - 1) ? lineSymbol: null,
													offset: '100%'
												}],
												strokeColor: rainbow[(_i + 1) % 2],
												strokeOpacity: 0.5,
												map: map
											});
										}

										_i++;

										// 현재 인덱스의 - 1의 라인을 그리기 때문에 + 1 에서 멈춘다
										if (_i == lines.length + 1){
											clearInterval(interval_id);
										} 
									}

									var interval_id = setInterval(drawOneLine, 1000);
								}	
								//success
								//success
							})
							//ajax
							//ajax
						}
						// trajectory
						// trajectory
						else if (mode == "sentiment"){
							query = encodeURI(
								"use dataverse twitter " + 
								"for $t in dataset ds_tweets " +
								"where contains($t.text_msg, \"" + keyword + "\" ) " +
								"return $t; ")

							// CORS 문제 때문에 proxy서버를 이용해야됨
							// http://adrenal.tistory.com/16
							proxy = "http://polaris.gachon.ac.kr/analyzer/index?query=";

							$.ajax({
								url: proxy + query,
								beforeSend: function(){
									//https://answers.squarespace.com/questions/139989/loading-gif-for-individual-images.html
									$('#queryStatus').html("<center><img src='https://d13yacurqjgara.cloudfront.net/users/82092/screenshots/1073359/spinner.gif'></center>")	
								},
								success: function(data){
									texts = "" 
									textsForSenti = ""
									locs = []  // locations
									$.each(data, function(idx, obj){
										//texts.push(obj["text_msg"])
										_lat = (obj["place"]["bounding_box"][0][1] + obj["place"]["bounding_box"][1][1])/2
										_lng= (obj["place"]["bounding_box"][0][0] + obj["place"]["bounding_box"][1][0])/2
										texts += "<h5>" + (obj["text_msg"]) + (obj["create_at"]) + "</h5>"
										textsForSenti += obj["text_msg"] +  "!@#$%"
										locs.push([parseFloat(_lat), parseFloat(_lng)])
									})

									// ajax for senti anal -> ajax in ajax.. complex
									$.ajax({
										url: "http://sclab.gachon.ac.kr:5000/sentiments",
										method: 'POST',
										crossDomain: true,
										dataType: 'json',
										data: {
											texts: textsForSenti	
										},
										success: function(data){
											sentiments = data
											//alert(data)	
											$('#queryStatus').html("")
											$('#queryResult').html(texts)
											// test
											$('#queryStatus').append(data);

											// Construct the circle for each value in citymap.
											// Note: We scale the area of the circle based on the population.
											for (var i in circles){
												circles[i].setMap(null);
											}

											// for heatmap
											pos_loc = []
											neg_loc = []
											// for chart
											pos_cnt = 0;
											neg_cnt = 0;

											for (var i in locs) {
												// heatmap 위한 배열 저장
												if (sentiments[i] == "0")
												 neg_loc.push(new google.maps.LatLng(locs[i][0], locs[i][1]));
												else 
												 pos_loc.push(new google.maps.LatLng(locs[i][0], locs[i][1]));

												// circle 그리기전	
												// circle에 색을 추가
												circle_color = (sentiments[i] == "0") ? 'rgba(255,0,0,0.7)' : 'rgba(0,255,0,0.7)';
												if (sentiments[i] == 0) neg_cnt ++;
												else pos_cnt++;

												// draw circle
												/*
												var cityCircle = new google.maps.Circle({
													strokeColor: circle_color,
													strokeOpacity: 0.8,
													fillColor: circle_color,
													fillOpacity: 0.35,
													map: map,
													center: {lat: locs[i][0] , lng: locs[i][1]},
													radius: 10000
												});
												circles.push(cityCircle)
												*/
											}

											console.log(neg_loc);
											console.log(pos_loc);
											gradient_pos = [
												'rgba(162, 246, 255, 0)',
												'rgba(144, 228, 255, 1)',
												'rgba(108, 192, 255, 1)',
												'rgba(90, 174, 255, 1)',
												'rgba(72, 156, 255, 1)',
												'rgba(54, 138, 255, 1)',
												'rgba(18, 102, 225, 1)',
												'rgba(0, 0, 255, 1)'
											]
											gradient_neg = [
												'rgba(255, 108, 108, 0)',
												'rgba(255, 90, 90, 1)',
												'rgba(255, 72, 72, 1)',
												'rgba(255, 54, 54, 1)',
												'rgba(255, 36, 36, 1)',
												'rgba(255, 24, 24, 1)',
												'rgba(255, 12, 12, 1)',
												'rgba(255, 0, 0, 1)'
											]
											// draw heat map
											function heat_neg(){
												heatmap_neg = new google.maps.visualization.HeatmapLayer({
													data: neg_loc, 
													map: map
												});
												heatmap_neg.set('gradient', heatmap_neg.get('gradient') ? null : gradient_neg);
												heatmap_neg.set('opacity', heatmap_neg.get('opacity') ? null : 0.7);
											}

											function heat_pos(){
												heatmap_pos = new google.maps.visualization.HeatmapLayer({
													data: pos_loc, 
													map: map
												});
												heatmap_pos.set('gradient', heatmap_pos.get('gradient') ? null : gradient_pos);
												heatmap_pos.set('opacity', heatmap_pos.get('opacity') ? null : 1);
											}
											if (pos_cnt > neg_cnt){
												heat_neg();	
												heat_pos();	
											}
											else {
												heat_pos();	
												heat_neg();	
											}

											console.log('pos:' + pos_cnt + ", neg:" + neg_cnt);
////////////////////////////////////
											google.charts.load('current', {'packages':['corechart']});
											google.charts.setOnLoadCallback(drawChart);
											function drawChart() {

												var data = google.visualization.arrayToDataTable([
													['sentiment', 'percent'],
													['postive', pos_cnt],
													['negative', neg_cnt],
												]);

												var options = {
													title: keyword,
													is3D: true,
													colors: ['skyblue', 'red']
												};

												var chart = new google.visualization.PieChart(document.getElementById('piechart'));

												chart.draw(data, options);
											}
////////////////////////////////////
										}
									})

									
								}
							})
						}
						// sentiment end
						// sentiment end
						else if (mode == "event"){
						}
						// event end
						// event end
					}
					// query make & send 
					// query make & send 

					function showBG(){
             $('#overlay').css('width', $(window).width())
               .css('height', $(window).height())
               .show()
					}

					$('#overlay').click(function(){
						$(this).hide()
					})
					
					// search 버튼 눌렀을 때
          $('#search').click(function(){
						showBG();
					  $('#search_input').focus()
						mode = "search"
          })

					// event 버튼 눌렀을 때
					// event 버튼 눌렀을 때
					// event 버튼 눌렀을 때
          $('#event').click(function(){
						alert('real time tracking..')
						mode = 'event'
						rainbow = ["rgba(255,102,102,0.8)", "rgba(255,153,051,0.8)", "rgba(255,255,153,0.8)", "rgba(153,255,153,0.8)", "rgba(102,51,255,0.8)", "rgba(51,51,153,0.8)", "rgba(153,051,153,0.8)"]
						_i = 0;
						proxy = "http://polaris.gachon.ac.kr/analyzer/get_stream";
						setInterval(function(){
							$.ajax({
								url: proxy,
								beforeSend: function(){
									//https://answers.squarespace.com/questions/139989/loading-gif-for-individual-images.html
									$('#queryStatus').prepend("<center id='loading_img' ><img src='https://d13yacurqjgara.cloudfront.net/users/82092/screenshots/1073359/spinner.gif'></center>")	
								},
								success: function(data){
									_i ++;
									texts_html = "" 
									locs = []  // locations
									texts = []  // texts 
									names = [] // names
									images = []
									
									// python의 u' 때문에 파싱이 안되는 문제 
									// http://www.codejs.co.kr/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-replace%EB%A5%BC-replaceall-%EC%B2%98%EB%9F%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/
									$.each(data, function(idx, str){
										t = JSON.parse(str)['tweet'];
										obj = JSON.parse(t)
										console.log(obj);
										//console.log(obj);
										if (obj["place"])	{
											_lat = (obj["place"]["bounding_box"]['coordinates'][0][0][1] + obj["place"]["bounding_box"]['coordinates'][0][1][1])/2
											_lng= (obj["place"]["bounding_box"]['coordinates'][0][2][0] + obj["place"]["bounding_box"]['coordinates'][0][2][0])/2
											texts_html += "<h5 style='color:" + rainbow[_i % 7] +"'>" + (obj["text"]) + "</h5>"
											locs.push([parseFloat(_lat), parseFloat(_lng)]);
											texts.push(obj["text"]);
											names.push(obj['user']['name'])
											images.push(obj["user"]["profile_image_url_https"])
										}
										console.log(locs)
									})
									$('#loading_img').hide();
									$('#queryResult').prepend(texts_html);

									//for (var i in circles){
									//	circles[i].setMap(null);
									//}

									for (var i in locs) {
										// Add the circle for this city to the map.
										var marker = new google.maps.Marker({
											map: map,
											position: {lat: locs[i][0] , lng: locs[i][1]},
										});
										var content = "<div style='width:350px'><img style='width:50px;height:50px; margin:5px; float:left;' src='" + images[i] + "'><span style='font-weight:bold'>"+ "<span style='color:red'>" + names[i] + "</span> : "+ texts[i] + "</span></div>"
										var infowindow = new google.maps.InfoWindow()
										google.maps.event.addListener(marker,'click', (function(marker,content,infowindow){ 
												return function() {
													 infowindow.setContent(content);
													 infowindow.open(map,marker);
												};
										})(marker,content,infowindow)); 
										
										markers.push(marker)
									}
								}
							})
						}, 10000);
          })
					// event 버튼 눌렀을 때
					// event 버튼 눌렀을 때
					// event 버튼 눌렀을 때

					// sentiment 버튼 눌렀을 때
          $('#sentiment').click(function(){
						showBG();
					  $('#search_input').focus()
						mode = "sentiment"
          })
					
					// trajectory 버튼 눌렀을 때
          $('#trajectory').click(function(){
						showBG();
					  $('#search_input').focus()
						mode = "trajectory"
          })

          $('#search_input').css('margin-top', $(window).height()/3).click(function(){
             return false;

          }).keyup(function(e){
						if (e.keyCode == 13) {
							asterixQuery($('#search_input').val(), mode);
							$('#overlay').hide();
							$('#queryResult').html("")
						} 
				 })
        
       })
    </script>
  </head>

  <body>
    <nav class="navbar navbar-default">
      <div class="container-fluid">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="#">Polaris</a>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
          <ul class="nav navbar-nav navbar-right">
            <li><a href="#" id="search" >Search</a></li>
            <li><a href="#" id="event" >Event</a></li>
            <li><a href="#" id="sentiment" >Sentiment</a></li>
            <li><a href="#" id="trajectory" >Trajectory</a></li>
            <li class="dropdown">
              <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">Dropdown <span class="caret"></span></a>
              <ul class="dropdown-menu" role="menu">
                <li><a href="#">Action</a></li>
                <li><a href="#">Another action</a></li>
                <li><a href="#">Something else here</a></li>
                <li class="divider"></li>
                <li><a href="#">Separated link</a></li>
              </ul>
            </li>
          </ul>
        </div><!-- /.navbar-collapse -->
      </div><!-- /.container-fluid -->
    </nav>

    <div id="map" style="width:100%;height:500px"></div>
		<div id="queryStatus"></div>

		<center><div id="piechart" style="width: 900px; height: 500px;"></div></center>

		<div id="queryResult"></div>


    <div id="overlay">
      <center><input id="search_input" type="text" placeholder="Search..."></center>
    </div>

    <script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAt-GrMs3jH1JjJl9HomAoPmLVg1nK1zw0 &callback=initMap&language=en&libraries=visualization">
    </script>
  </body>
</html>

